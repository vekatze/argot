import {
  core.c-size {from-c-size},
  core.external,
  core.foreign {THREAD_MUTEX_SIZE},
  core.list {span},
  core.magic,
  core.memory {load-int, store-int},
  core.pointer {shift},
  core.word,
}

inline _modify<a, b>(ch: &cell(a), f: (a) -> pair(a, b)): b {
  let ch = core.magic.cast(&cell(a), pointer, ch) in
  let u = core.word.size in
  let mutex-ptr = shift(ch, u) in
  core.external.thread-mutex-lock(mutex-ptr);
  let val-base: int = load-int(ch) in
  let orig-val = core.magic.cast(int, a, val-base) in
  let Pair(new-val, result) = f(orig-val) in
  store-int(core.magic.cast(a, int, new-val), ch);
  let mutex-size = from-c-size(THREAD_MUTEX_SIZE) in
  core.external.thread-cond-signal(shift(ch, add-int(u, mutex-size)));
  core.external.thread-mutex-unlock(mutex-ptr);
  result
}

define _break-at-key(xs: list(text), key: &text): pair(list(text), list(text)) {
  span(xs, function (x) {
    ne-text(x, key)
  })
}
