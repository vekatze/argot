import {
  core.bool.show,
  core.either {from-right},
  core.int.show {show-int},
  core.list {for},
  core.show {Show},
  core.text.show {show-text},
  this.move.make-argot-kit {make-argot-kit-from-argv},
  this.move.parse {end-of-input, many, optional},
  this.move.preset {flag, int-required, text-required},
  this.rule.argot {argot},
  this.rule.error {report},
}

define main(): unit {
  Unit
}

data config {
| Config(
    v1: bool,
    v2: bool,
    v3: int,
    v4: text,
    v5: list(text),
  )
}

define my-argument-parser: argot(config) {
  function (k) {
    try v1 = flag("-b")(k) in
    try v2 = flag("-c")(k) in
    try mv3 = optional(int-required("--integer"))(k) in
    try mv4 = optional(text-required("--clang-option"))(k) in
    try v5 = many(text-required("-i"))(k) in
    try _ = end-of-input(k) in
    Right(
      Config of {
        v1,
        v2,
        v3 = from-right(mv3, 123),
        v4 = from-right(mv4, *""),
        v5,
      },
    )
  }
}

define zen(): unit {
  pin k = make-argot-kit-from-argv() in
  match my-argument-parser(k) {
  | Left(e) =>
    printf("{}\n", [report(e)])
  | Right(v) =>
    let Config of {v1, v2, v3, v4, v5} = v in
    let Show of {show = !show} = core.bool.show.as-show in
    print("right\n");
    printf("v1: {}, v2: {}, v3: {}, v4: {}\n", [
      !show(v1),
      !show(v2),
      show-int(v3),
      show-text(v4),
    ]);
    print("v5:\n");
    for(v5, function (t) {
      printf("{}\n", [t])
    })
  }
}
