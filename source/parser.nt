import {
  core.functor {Functor, functor},
  core.list {drop, length},
  core.system {get-argv},
  this.error {
    Remaining-Arguments,
    error,
  },
}

data parser(a) {
| Parser(
    reader: (list(text)) -> pair(either(error, a), list(text)),
  )
}

define for-each<a, b>(mx: parser(a), f: (a) -> b): parser(b) {
  Parser(function (xs) {
    let Parser of {reader = g} = mx in
    let Pair(mv, ys) = g(xs) in
    match mv {
    | Left(e) =>
      Pair(Left(e), ys)
    | Right(v) =>
      Pair(Right(f(v)), ys)
    }
  })
}

constant as-functor: functor(parser) {
  Functor of {for-each = this.parser.for-each}
}

define return<a>(x: a): parser(a) {
  Parser(function (xs) {
    Pair(Right(x), xs)
  })
}

define argument-parser<a, b>(mx: parser(a), k: (a) -> parser(b)): parser(b) {
  Parser(function (xs) {
    let Parser of {reader = f} = mx in
    let Pair(mv, ys) = f(xs) in
    match mv {
    | Left(e) =>
      Pair(Left(e), ys)
    | Right(v) =>
      let Parser of {reader = g} = k(v) in
      g(ys)
    }
  })
}

define parse-arguments<a>(mx: parser(a), arguments: list(text)): either(error, a) {
  let Parser of {reader} = mx in
  let Pair(result, rest) = reader(arguments) in
  match result {
  | Left(e) =>
    Left(e)
  | Right(v) =>
    let len on rest = length(rest) in
    if eq-int(len, 0) {
      Right(v)
    } else {
      Left(Remaining-Arguments(rest))
    }
  }
}

define parse<a>(mx: parser(a)): either(error, a) {
  let argv = get-argv() in
  let arguments = drop(argv, 1) in
  parse-arguments(mx, arguments)
}
